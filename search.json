[{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Motif Analysis Using motifTestR","text":"Bioinformatic analysis data ChIP-Seq ATAC-Seq commonly involves analysis sequences within regions identified interest. Whilst analyses restricted transcription factors, can often form important component type analysis. Analysis Transcription Factor Binding Motifs (TFBMs) often performed using Position Weight Matrices (PWMs) encode flexibility exact sequence bound particular transcription factor, computationally demanding task many popular tools enabling analysis outside R. tools within motifTestR aim build expand existing resources available Bioconductor community, performing analyses inside R environment. package offers two complementary approaches TFBM analysis within XStringSet objects containing multiple sequences. function testMotifPos() identifies motifs showing positional bias within set sequences, whilst overall enrichment within set sequences enabled testMotifEnrich(). extended analyse motifs grouped “clusters” using testClusterPos() testClusterEnrich(). Additional functions aid visualisation preparation two key approaches.","code":""},{"path":[]},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"installation","dir":"Articles","previous_headings":"Setup","what":"Installation","title":"Motif Analysis Using motifTestR","text":"order perform operations vignette, first install motifTestR. installed, can load required packages, set default plotting theme setup many threads use analysis.","code":"if (!\"BiocManager\" %in% rownames(installed.packages()))   install.packages(\"BiocManager\") BiocManager::install(\"motifTestR\") library(motifTestR) library(extraChIPs) library(rtracklayer) library(BSgenome.Hsapiens.UCSC.hg19) library(parallel) library(ggplot2) library(patchwork) library(universalmotif) theme_set(theme_bw()) cores <- 1"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"defining-a-set-of-peaks","dir":"Articles","previous_headings":"Setup","what":"Defining a Set of Peaks","title":"Motif Analysis Using motifTestR","text":"peaks used workflow obtained bed files denoting binding sites Androgen Receptor Estrogen Receptor along H3K27ac marks, ZR-75-1 cells DHT treatment (Hickey et al. 2021). object ar_er_peaks contains subset 849 peaks found within chromosome 1, peaks resized 400bp Whilst example dataset small convenience R package, wishing work complete set peaks (.e. just chromosome 1) may run code provided final section obtain peaks. produce greater number significant results subsequent analyses also increase running times functions.","code":"data(\"ar_er_peaks\") ar_er_peaks ## GRanges object with 849 ranges and 0 metadata columns: ##         seqnames              ranges strand ##            <Rle>           <IRanges>  <Rle> ##     [1]     chr1     1008982-1009381      * ##     [2]     chr1     1014775-1015174      * ##     [3]     chr1     1051296-1051695      * ##     [4]     chr1     1299561-1299960      * ##     [5]     chr1     2179886-2180285      * ##     ...      ...                 ...    ... ##   [845]     chr1 246771887-246772286      * ##   [846]     chr1 246868678-246869077      * ##   [847]     chr1 246873126-246873525      * ##   [848]     chr1 247095351-247095750      * ##   [849]     chr1 247267507-247267906      * ##   ------- ##   seqinfo: 24 sequences from hg19 genome sq <- seqinfo(ar_er_peaks)"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"obtaining-a-set-of-sequences-for-testing","dir":"Articles","previous_headings":"Setup","what":"Obtaining a Set of Sequences for Testing","title":"Motif Analysis Using motifTestR","text":"Now genomic co-ordinates set peaks, can obtain sequences associated peak. source ranges can optionally added sequences names coercing ranges character vector.","code":"test_seq <- getSeq(BSgenome.Hsapiens.UCSC.hg19, ar_er_peaks) names(test_seq) <- as.character(ar_er_peaks)"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"obtaining-a-list-of-pwms-for-testing","dir":"Articles","previous_headings":"Setup","what":"Obtaining a List of PWMs for Testing","title":"Motif Analysis Using motifTestR","text":"small list Position Frequency Matrices (PFMs), obtained MotifDb provided package suitable downstream analysis. functions convert PFMs PWMs internally. , larger set motifs may obtained using modifying example code end vignette","code":"data(\"ex_pfm\") names(ex_pfm) ## [1] \"ESR1\"  \"ANDR\"  \"FOXA1\" \"ZN143\" \"ZN281\" ex_pfm$ESR1 ##       1     2     3     4     5     6     7     8     9    10    11    12    13 ## A 0.638 0.074 0.046 0.094 0.002 0.856 0.108 0.396 0.182 0.104 0.054 0.618 0.040 ## C 0.048 0.006 0.018 0.072 0.888 0.006 0.442 0.604 0.376 0.078 0.034 0.198 0.884 ## G 0.260 0.808 0.908 0.178 0.048 0.112 0.312 0.000 0.286 0.044 0.908 0.070 0.014 ## T 0.054 0.112 0.028 0.656 0.062 0.026 0.138 0.000 0.156 0.774 0.004 0.114 0.062 ##      14    15 ## A 0.090 0.058 ## C 0.822 0.330 ## G 0.008 0.066 ## T 0.080 0.546"},{"path":[]},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"finding-pwm-matches","dir":"Articles","previous_headings":"Searching Sequences","what":"Finding PWM Matches","title":"Motif Analysis Using motifTestR","text":"PWM matches within test sequences can returned PWMs, getPwmMatches() searching using PWM ’s reverse complement default. Matches returned showing position within sequence, well distance centre sequence matching section within larger sequence. Whilst strict requirement sequences width, generally good practice type analysis commonly requirement downstream statistical analysis. Many sequences contain multiple matches, can subset results ‘best match’ setting best_only = TRUE. best match chosen highest score returned match. multiple matches return identical scores, tied matches returned default equally -weighted positional analysis. can controlled setting break_ties c(“random”, “first”, “last”, “central”), choose randomly, sequence order proximity centre. can return matches complete list PWMs, list DataFrame objects. strategy allows visualisation results well testing positional bias. strategy passing single, multiple PWMs can applied even simply wishing count total matches PWM. Counting may useful restricting downstream analysis set motifs given number matches.","code":"score_thresh <- \"70%\" getPwmMatches(ex_pfm$ESR1, test_seq, min_score = score_thresh) ## DataFrame with 51 rows and 8 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:1008982-1009381   17.3522         R       216       230          23 ## 2     chr1:6543164-6543563   15.7958         R       176       190         -17 ## 3   chr1:10010470-10010869   18.0880         F       193       207           0 ## 4   chr1:11434290-11434689   20.8412         R       321       335         128 ## 5   chr1:17855904-17856303   15.7429         F       195       209           2 ## ...                    ...       ...       ...       ...       ...         ... ## 47  chr1:212731397-21273..   16.1154         R        88       102        -105 ## 48  chr1:214500812-21450..   17.1325         R       186       200          -7 ## 49  chr1:217979498-21797..   16.6438         F       186       200          -7 ## 50  chr1:233243433-23324..   15.7178         F       201       215           8 ## 51  chr1:247267507-24726..   16.8796         F       313       327         120 ##     seq_width           match ##     <integer>  <DNAStringSet> ## 1         400 TGGTCACAGTGACCT ## 2         400 GGGTCATCCTGTCCC ## 3         400 AGGTCACCCTGGCCC ## 4         400 AGGTCACCGTGACCC ## 5         400 AGGGCAAAATGACCC ## ...       ...             ... ## 47        400 GTGTCACAGTGACCC ## 48        400 AGGTCACAATGACAT ## 49        400 GGGTCATCCTGCCCC ## 50        400 AGGTCATAAAGACCT ## 51        400 AGGTCAGAATGACCG getPwmMatches(ex_pfm$ESR1, test_seq, min_score = score_thresh, best_only = TRUE) ## DataFrame with 50 rows and 8 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:1008982-1009381   17.3522         R       216       230          23 ## 2     chr1:6543164-6543563   15.7958         R       176       190         -17 ## 3   chr1:10010470-10010869   18.0880         F       193       207           0 ## 4   chr1:11434290-11434689   20.8412         R       321       335         128 ## 5   chr1:17855904-17856303   15.7429         F       195       209           2 ## ...                    ...       ...       ...       ...       ...         ... ## 46  chr1:212731397-21273..   16.1154         R        88       102        -105 ## 47  chr1:214500812-21450..   17.1325         R       186       200          -7 ## 48  chr1:217979498-21797..   16.6438         F       186       200          -7 ## 49  chr1:233243433-23324..   15.7178         F       201       215           8 ## 50  chr1:247267507-24726..   16.8796         F       313       327         120 ##     seq_width           match ##     <integer>  <DNAStringSet> ## 1         400 TGGTCACAGTGACCT ## 2         400 GGGTCATCCTGTCCC ## 3         400 AGGTCACCCTGGCCC ## 4         400 AGGTCACCGTGACCC ## 5         400 AGGGCAAAATGACCC ## ...       ...             ... ## 46        400 GTGTCACAGTGACCC ## 47        400 AGGTCACAATGACAT ## 48        400 GGGTCATCCTGCCCC ## 49        400 AGGTCATAAAGACCT ## 50        400 AGGTCAGAATGACCG bm_all <- getPwmMatches(   ex_pfm, test_seq, min_score = score_thresh, best_only = TRUE, break_ties = \"all\",   mc.cores = cores ) countPwmMatches(ex_pfm, test_seq, min_score = score_thresh, mc.cores = cores) ##  ESR1  ANDR FOXA1 ZN143 ZN281  ##    51    36   292    43    46"},{"path":[]},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"testing-for-positional-bias","dir":"Articles","previous_headings":"Analysis of Positional Bias","what":"Testing for Positional Bias","title":"Motif Analysis Using motifTestR","text":"commonly used tool within MEME-Suite centrimo (Bailey Machanick 2012) motifTestR provides simple, easily interpretable alternative approach using testMotifPos(). function bins distances centre sequence central bin symmetrical around zero, positional bias expected (.e. H0), matches equally distributed bins. Unlike centrimo, assumption centrality made notable deviations discrete uniform distribution may considered significant. test within bin performed using binom.test() single, summarised p-value across bins returned using asymptotically exact harmonic mean p-value (HMP) (Wilson 2019). default, binomial test applied null hypothesis detect matches bin greater expected, however, can also set user. using harmonic-mean p-value however, choosing alternate hypothesis “greater” tends return conservative p-value across entire set bins. bins returned function represent widest range bins raw p-values HMP. Wide ranges tend associated lower significance specific PWM. point divergence centrimo results dependent pre-determined bin-size region enrichment formed using p-values, instead adaptive methods centrimo (Bailey Machanick 2012). Due two-stranded nature DNA, distance zero can also assessed setting abs = TRUE case first bin begins zero. approach particularly helpful detecting co-located transcription factors can distance TF used obtain centre test set sequences.","code":"res_pos <- testMotifPos(bm_all, mc.cores = cores) head(res_pos) ##       start end centre width total_matches matches_in_region  expected ## ESR1      5  15     10    10            50                 8  1.291990 ## ANDR    -25  -5    -15    20            34                12  1.770833 ## FOXA1    -5  25     10    30           238                32 12.205128 ## ZN143   -55  55      0   110            26                20  5.473684 ## ZN281  -195 195      0   390            40                38 25.529716 ##       enrichment prop_total           p         fdr consensus_motif ## ESR1    6.192000  0.1600000 0.001643146 0.008215728    35, 0, 1.... ## ANDR    6.776471  0.3529412 0.004700634 0.011751585    0, 0, 0,.... ## FOXA1   2.621849  0.1344538 0.010576124 0.017626873    0, 0, 0,.... ## ZN143   3.653846  0.7692308 0.243171867 0.303964834    6, 1, 13.... ## ZN281   1.488462  0.9500000 0.977504172 0.977504172    8, 6, 22.... res_abs <- testMotifPos(bm_all, abs = TRUE, mc.cores = cores)  head(res_abs) ##       start end centre width total_matches matches_in_region  expected ## ESR1     10  20     15    10            50                11  2.590674 ## ANDR     10  20     15    10            34                 8  1.770833 ## FOXA1     0  30     15    30           238                69 36.615385 ## ZN143     0  50     25    50            26                20  6.842105 ## ZN281     0 190     95   190            40                38 33.160622 ##       enrichment prop_total            p         fdr consensus_motif ## ESR1    4.246000  0.2200000 0.0007907262 0.003953631    35, 0, 1.... ## ANDR    4.517647  0.2352941 0.0057468643 0.014367161    0, 0, 0,.... ## FOXA1   1.884454  0.2899160 0.0106210602 0.017701767    0, 0, 0,.... ## ZN143   2.923077  0.7692308 0.1963203926 0.245400491    6, 1, 13.... ## ZN281   1.145938  0.9500000 0.9173293626 0.917329363    8, 6, 22...."},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"viewing-matches","dir":"Articles","previous_headings":"Analysis of Positional Bias","what":"Viewing Matches","title":"Motif Analysis Using motifTestR","text":"complete set matches returned list can simply passed ggplot2 (Wickham 2016) visualisation, order asses whether PWM appears positional bias. default, smoothed values across motifs overlaid (Figure 1A), however, tailoring using ggplot simple produce wide variety outputs (Figure 1B) Distribution motif matches around centres set peaks Whilst produce figures showing symmetrical distribution around peak centres, distance peak centre can also shown absolute distance. Figure 2 distances shown heatmap () CDF (B). latter makes easy see 50% ESR1 matches occur within short distance centre (~25bp), whilst ANDR FOXA1, distance roughly doubled. Changing binwidth argument can either smooth data increase fine resolution. Distribution motif matches shown distance centre sequence","code":"topMotifs <- res_pos |>     subset(fdr < 0.05) |>     rownames() A <- plotMatchPos(bm_all[topMotifs], binwidth = 10, se = FALSE) B <- plotMatchPos(     bm_all[topMotifs], binwidth = 10, geom = \"col\", use_totals = TRUE ) +   geom_smooth(se = FALSE, show.legend = FALSE) +   facet_wrap(~name) A + B + plot_annotation(tag_levels = \"A\") & theme(legend.position = \"bottom\") topMotifs <- res_abs |>     subset(fdr < 0.05) |>     rownames() A <- plotMatchPos(bm_all[topMotifs], abs = TRUE, type = \"heatmap\") +   scale_fill_viridis_c() B <- plotMatchPos(   bm_all[topMotifs], abs = TRUE, type = \"cdf\", geom = \"line\", binwidth = 5 ) A + B + plot_annotation(tag_levels = \"A\") & theme(legend.position = \"bottom\")"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"testing-for-motif-enrichment","dir":"Articles","previous_headings":"","what":"Testing For Motif Enrichment","title":"Motif Analysis Using motifTestR","text":"well providing methods analysing positional bias within set PWM matches, methods test enrichment also implemented motifTestR. common approach testing motif enrichment obtain set random background sequences represent suitable control set define null hypothesis (H0). motifTestR, two alternatives offered utilising approach, return similar results involve different levels computational effort. first approach sample multiple sets background sequences ‘iterating’ obtain null distribution PWM matches comparing observed counts distribution. noticed approach commonly produces set counts H0 closely resemble Poisson distribution, second approach offered motifTestR sample suitable large set background sequences estimate parameters Poisson distribution PWM, testing .","code":""},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"defining-a-set-of-control-sequences","dir":"Articles","previous_headings":"Testing For Motif Enrichment","what":"Defining a Set of Control Sequences","title":"Motif Analysis Using motifTestR","text":"Choosing suitable set control sequences can undertaken number methods. motifTestR enables strategy matching sequences number given features. data object zr75_enh contains candidate enhancers ZR-75-1 cells defined v2.0 Enhancer Atlas (Gao Qian 2019), chromosome 1 . high proportion peaks associated regions choosing control sequences drawn proportion regions may viable strategy. First can annotate peak whether overlap enhancer, whether peak belongs region. Next can define two sets GenomicRanges, one representing enhancers remainder genome, restricted chromosome 1 consistency. Control regions can drawn proportions match test set sequences. provided object hg19_mask contains regions genome rich Ns, centromeres telomeres. Sequences containing Ns produce warning messages matching PWMs avoiding regions may wise, without introducing sequence bias. passed makeRMRanges() ranges excluded, whilst sampling multiple random, size-matched ranges corresponding test set ranges sequences analysed, drawn proportionally matching genomic regions. Whilst example used candidate enhancers, type number genomic regions can used, limitless number classification strategies possible. now returned set control ranges randomly-selected (R) size-matched (M) peaks drawn similar distribution genomic features. setting n_iter = 100, set 100 times larger test set typically value can set 1000 even 5000 better estimates parameters null distribution. However, increase computational burden analysis. choosing iterative strategy, total number sampled ranges can also specified. case column iteration added returned ranges. order perform analysis, can now extract genomic sequences corresponding randomly selected control ranges. Passing mcols element ensure iteration numbers passed sequences, required approach. choosing strategies enrichment testing outside motifTestR, sequences can exported fasta file using writeXStringSet Biostrings package.","code":"data(\"zr75_enh\") mean(overlapsAny(ar_er_peaks, zr75_enh)) ## [1] 0.6914016 ar_er_peaks$feature <- ifelse(   overlapsAny(ar_er_peaks, zr75_enh), \"enhancer\", \"other\" ) chr1 <- GRanges(sq)[1] bg_ranges <- GRangesList(   enhancer = zr75_enh,   other = GenomicRanges::setdiff(chr1, zr75_enh) ) data(\"hg19_mask\") set.seed(305) rm_ranges <- makeRMRanges(   splitAsList(ar_er_peaks, ar_er_peaks$feature),   bg_ranges, exclude = hg19_mask,   n_iter = 100 ) rm_seq <- getSeq(BSgenome.Hsapiens.UCSC.hg19, rm_ranges) mcols(rm_seq) <- mcols(rm_ranges)"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"testing-for-enrichment","dir":"Articles","previous_headings":"Testing For Motif Enrichment","what":"Testing For Enrichment","title":"Motif Analysis Using motifTestR","text":"Testing overall motif enrichment implemented using multiple strategies, using Poisson, QuasiPoisson pure Iterative approaches. Whilst PWMs may closely follow Poisson distribution H0, others may -dispersed suited Quasi-Poisson approach. approach unique advantages weaknesses summarised : Can use number BG Sequences, unrelated test set Modelling performed based expected number matches per sequence fastest approach Anti-conservative p-values counts -dispersed Appropriate “quick & dirty” checks expected discoveries Modelling performed per set sequences (identical size test set) Requires BG Sequences ‘iterative’ blocks Fewer ‘iterative blocks’ can still model -dispersion reasonably well model assumptions Requires BG Sequences ‘iterative’ blocks P-Values derived Z-scores (using Central Limit Theorem) Sampled p-values iterations can used preferred Requires largest number iterative blocks (>1000) Slowest, reliable approach per iteration perspective little difference Iterative modelled QuasiPoisson approaches, however modelled approaches can still return reliable results lower number iterative blocks, lending clear speed advantage. Z-scores returned used statistical testing iterative approach indicative purposes models model. Whilst guidelines developed optimal number sequences, control set orders magnitude larger test set may prudent. larger set control sequences clearly leads longer analytic time-frames larger computational resources, left considered appropriate researcher, nothing , chose control set 100x larger test sequences. choosing iterative approach using iteration-derived p-values, setting number iterations based resolution required values may important, noting lowest possible p-value 1/n_iterations. Setting model “iteration” instead uses classical iterative approach define null distributions counts Z-scores calculated values. returned p-values test taken Z-scores directly, p-values derived sampled iterations also returned preferred use results researcher. Whilst requiring greater computational effort, fewer statistical assumptions made results may conservative modelling approaches. selected motifs interest, sequences matches can compared easily assess co-occurrence, using plotOverlaps() extraChIPs. test set, peaks selected based co-detection ESR1 ANDR, however rate co-occurrence low, revealing key insights binding dynamics two TFs. Distribution select PWM matches within sequences. sequence considered , match numbers may returned testing, includes multiple matches within sequence.","code":"enrich_res <- testMotifEnrich(   ex_pfm, test_seq, rm_seq, min_score = score_thresh, model = \"quasi\", mc.cores = cores ) head(enrich_res) ##       sequences matches expected enrichment          Z            p ## ZN143       849      43     0.19 226.315789 102.144041 2.355850e-37 ## ESR1        849      51     4.41  11.564626  21.469841 3.071728e-29 ## FOXA1       849     292   125.64   2.324101  13.345825 9.782504e-23 ## ANDR        849      36    11.53   3.122290   7.014137 2.621038e-09 ## ZN281       849      46    19.53   2.355351   5.186250 2.777006e-06 ##                fdr n_iter     sd_bg ## ZN143 1.177925e-36    100  0.419114 ## ESR1  7.679321e-29    100  2.170021 ## FOXA1 1.630417e-22    100 12.465322 ## ANDR  3.276298e-09    100  3.488669 ## ZN281 2.777006e-06    100  5.103880 iter_res <- testMotifEnrich(   ex_pfm, test_seq, rm_seq, min_score = score_thresh, mc.cores = cores, model = \"iteration\" ) head(iter_res) ##       sequences matches expected enrichment          Z            p ## ESR1        849      51     4.41  11.564626  21.469841 0.000000e+00 ## FOXA1       849     292   125.64   2.324101  13.345825 0.000000e+00 ## ZN143       849      43     0.19 226.315789 102.144041 0.000000e+00 ## ANDR        849      36    11.53   3.122290   7.014137 2.313705e-12 ## ZN281       849      46    19.53   2.355351   5.186250 2.145708e-07 ##                fdr iter_p n_iter     sd_bg ## ESR1  0.000000e+00   0.01    100  2.170021 ## FOXA1 0.000000e+00   0.01    100 12.465322 ## ZN143 0.000000e+00   0.01    100  0.419114 ## ANDR  2.892131e-12   0.01    100  3.488669 ## ZN281 2.145708e-07   0.01    100  5.103880 ex_pfm |>   getPwmMatches(test_seq, min_score = score_thresh, mc.cores = cores) |>   lapply(\\(x) x$seq) |>   plotOverlaps(type = \"upset\")"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"working-with-clustered-motifs","dir":"Articles","previous_headings":"","what":"Working with Clustered Motifs","title":"Motif Analysis Using motifTestR","text":"TFBMs often contain high level similarity TFBMs, especially within large closely related families, GATA STAT families. can difficult ascertain member family truly bound site inspecting sequence data alone. relevant example, looking UpSet plot, half sequences match ANDR motif found also contain FOXA1 motif. mean bound sequence, sequences simply matched PWMs? can see quite similarity core regions two binding motifs Binding Motifs ANDR FOXA1 overlaid best alignment, showing similarity core regions. motifTestR offers simple helpful strategy reducing level redundancy within set results, grouping highly similar motifs cluster testing enrichment, positional bias TFBM within cluster. clustering methodology enabled within motifTestR allows use comparison methods provided compare_motifs() (Tremblay 2024). Whilst example set TFBMs slightly artificial motifs can still grouped clusters. using larger database TFBMs carefully selected threshold may appropriate, however dataset, four clusters able formed using default settings. ideal method group PWMs clusters manual inspection clusters produced best strategy process. Names strictly required downstream analysis, can help interpretability Plot produced requested clusterMotifs showing relationship motifs. red horizontal line indicates threshold motifs grouped together cluster. Clustering performed using hclust distance matrices produced universalmotif::compare_motifs() clusters can now tested positional bias using testClusterPos(). Matches unique sites match PWM within cluster, overlapping sites matches multiple PWMs counted single match. overlapping matches found, one highest relative score (score / maxScore) chosen given raw scores PWM different scales. list best matches can produced analogous way individual PWMs, using getClusterMatches() instead getPwmMatches(), motif assigned match also provided. matches can passed testClusterPos(), works near-identical manner testMotifPos() methods implemented testing enrichment set background sequences can also used clusters motifs.","code":"c(\"ANDR\", \"FOXA1\") |>     lapply(         \\(x) create_motif(ex_pfm[[x]], name = x, type = \"PPM\")     ) |>     view_motifs() cl <- clusterMotifs(ex_pfm, plot = TRUE, labels = NULL) ex_cl <- split(ex_pfm, cl) names(ex_cl) <- vapply(split(names(cl), cl), paste, character(1), collapse = \"/\") cl_matches <- getClusterMatches(     ex_cl, test_seq, min_score = score_thresh, best_only = TRUE ) cl_matches ## $ESR1 ## DataFrame with 50 rows and 9 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:1008982-1009381   17.3522         R       216       230          23 ## 2     chr1:6543164-6543563   15.7958         R       176       190         -17 ## 3   chr1:10010470-10010869   18.0880         F       193       207           0 ## 4   chr1:11434290-11434689   20.8412         R       321       335         128 ## 5   chr1:17855904-17856303   15.7429         F       195       209           2 ## ...                    ...       ...       ...       ...       ...         ... ## 46  chr1:212731397-21273..   16.1154         R        88       102        -105 ## 47  chr1:214500812-21450..   17.1325         R       186       200          -7 ## 48  chr1:217979498-21797..   16.6438         F       186       200          -7 ## 49  chr1:233243433-23324..   15.7178         F       201       215           8 ## 50  chr1:247267507-24726..   16.8796         F       313       327         120 ##     seq_width       motif           match ##     <integer> <character>  <DNAStringSet> ## 1         400        ESR1 TGGTCACAGTGACCT ## 2         400        ESR1 GGGTCATCCTGTCCC ## 3         400        ESR1 AGGTCACCCTGGCCC ## 4         400        ESR1 AGGTCACCGTGACCC ## 5         400        ESR1 AGGGCAAAATGACCC ## ...       ...         ...             ... ## 46        400        ESR1 GTGTCACAGTGACCC ## 47        400        ESR1 AGGTCACAATGACAT ## 48        400        ESR1 GGGTCATCCTGCCCC ## 49        400        ESR1 AGGTCATAAAGACCT ## 50        400        ESR1 AGGTCAGAATGACCG ##  ## $`ANDR/FOXA1` ## DataFrame with 255 rows and 9 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:5658040-5658439   13.7470         R       203       214         8.5 ## 2     chr1:6969924-6970323   14.0694         F       199       210         4.5 ## 3     chr1:8077594-8077993   12.6907         F        28        39      -166.5 ## 4     chr1:8121343-8121742   14.4605         F       177       188       -17.5 ## 5     chr1:8130962-8131361   15.1441         F       341       352       146.5 ## ...                    ...       ...       ...       ...       ...         ... ## 251 chr1:241913254-24191..   12.3147         F       196       207         1.5 ## 252 chr1:244065451-24406..   13.4339         R       288       299        93.5 ## 253 chr1:244417385-24441..   23.0102         R       167       184       -24.5 ## 254 chr1:244490601-24449..   16.6073         F       189       206        -2.5 ## 255 chr1:246746473-24674..   14.3461         F        40        51      -154.5 ##     seq_width       motif              match ##     <integer> <character>     <DNAStringSet> ## 1         400       FOXA1       TGTCATCCCGCC ## 2         400       FOXA1       GGCTGGCGGGAT ## 3         400       FOXA1       CAGGATCCGCTG ## 4         400       FOXA1       ACTTGCCAGTGA ## 5         400       FOXA1       CCCACCCCTCCA ## ...       ...         ...                ... ## 251       400       FOXA1       ACAGGCTGGCGG ## 252       400       FOXA1       CAGAGCACAGTC ## 253       400        ANDR TGGCAAGTCAGGGGTGGG ## 254       400        ANDR GTCCCAGACAGGCTGGCG ## 255       400       FOXA1       CAGGGAGCCACA ##  ## $ZN143 ## DataFrame with 26 rows and 9 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:1051296-1051695   24.3993         F       360       381       170.5 ## 2     chr1:6673482-6673881   24.5459         R       199       220         9.5 ## 3   chr1:10532432-10532831   26.8427         F       166       187       -23.5 ## 4   chr1:22109982-22110381   29.0591         F       210       231        20.5 ## 5   chr1:36614982-36615381   23.8117         R       243       264        53.5 ## ...                    ...       ...       ...       ...       ...         ... ## 22  chr1:224544286-22454..   28.4852         R       151       172       -38.5 ## 23  chr1:243418636-24341..   22.4081         F       206       227        16.5 ## 24  chr1:243419063-24341..   24.5149         F       143       164       -46.5 ## 25  chr1:244615397-24461..   28.9222         R       166       187       -23.5 ## 26  chr1:244815816-24481..   30.0534         F       216       237        26.5 ##     seq_width       motif                  match ##     <integer> <character>         <DNAStringSet> ## 1         400       ZN143 AGCGCCCTGGGAAATGTAGTCC ## 2         400       ZN143 TGCCTTGTGGGAGTGGTAGTCC ## 3         400       ZN143 AGCCTGCCGGGAGATGTAGTTC ## 4         400       ZN143 GGCATGCTGGGATTTGTAGTCT ## 5         400       ZN143 AGCACTCCGGGAGTTGTAGTTG ## ...       ...         ...                    ... ## 22        400       ZN143 CGCATGCTGGGAATTGTAGTTC ## 23        400       ZN143 GGCATGCTAGGAGTTGTAGTGT ## 24        400       ZN143 TGGTTTCTGGGAATTGTAGTGT ## 25        400       ZN143 TGCATGCTGGGATTTGTAGTCC ## 26        400       ZN143 TGCATGCTGGGAGTTGTAGTCT ##  ## $ZN281 ## DataFrame with 40 rows and 9 columns ##                        seq     score direction     start       end from_centre ##                <character> <numeric>  <factor> <integer> <integer>   <numeric> ## 1     chr1:6673482-6673881   18.2091         R        35        49        -158 ## 2     chr1:8077594-8077993   16.4907         R       224       238          31 ## 3   chr1:10010470-10010869   17.5981         R       319       333         126 ## 4   chr1:15240346-15240745   18.1241         F        91       105        -102 ## 5   chr1:17846899-17847298   16.5147         F       123       137         -70 ## ...                    ...       ...       ...       ...       ...         ... ## 36  chr1:226063163-22606..   22.6040         R       274       288          81 ## 37  chr1:226249719-22625..   18.8379         R       310       324         117 ## 38  chr1:235667696-23566..   17.6496         R        69        83        -124 ## 39  chr1:236666415-23666..   16.6439         F         7        21        -186 ## 40  chr1:246158593-24615..   16.4984         F       366       380         173 ##     seq_width       motif           match ##     <integer> <character>  <DNAStringSet> ## 1         400       ZN281 CGCGGGGGGAGGGGC ## 2         400       ZN281 AGGTGGGGGTTGGGC ## 3         400       ZN281 AACGGGGGGAGGGGA ## 4         400       ZN281 GGATGGAGGAGGGGA ## 5         400       ZN281 TCGTGGGGGAGGGGT ## ...       ...         ...             ... ## 36        400       ZN281 GGGTGGGGGAGGGGG ## 37        400       ZN281 AGTGGGGGGAGGGGA ## 38        400       ZN281 CGGAGGGGGCGGGGC ## 39        400       ZN281 GGGTGGAGGTGGGGG ## 40        400       ZN281 AGTAGGGGGTGGGGG testClusterPos(cl_matches, test_seq, abs = TRUE) ##            start end centre width total_matches matches_in_region  expected ## ANDR/FOXA1     0  30     15    30           253                57 26.354167 ## ESR1          10  20     15    10            50                11  2.590674 ## ZN143          0  50     25    50            26                20  6.842105 ## ZN281          0 190     95   190            40                38 33.160622 ##            enrichment prop_total            p         fdr consensus_motif ## ANDR/FOXA1   2.162846  0.2252964 0.0004845717 0.001581452    46, 79, .... ## ESR1         4.246000  0.2200000 0.0007907262 0.001581452    35, 0, 1.... ## ZN143        2.923077  0.7692308 0.1963203926 0.261760523    6, 1, 13.... ## ZN281        1.145938  0.9500000 0.9173293626 0.917329363    8, 6, 22.... testClusterEnrich(   ex_cl, test_seq, rm_seq, min_score = score_thresh, model = \"quasi\", mc.cores = cores ) ##            sequences matches expected enrichment         Z            p ## ZN143            849      43     0.19 226.315789 102.14404 2.355850e-37 ## ESR1             849      51     4.41  11.564626  21.46984 3.071728e-29 ## ANDR/FOXA1       849     312   133.08   2.344454  14.11311 2.961045e-24 ## ZN281            849      46    19.53   2.355351   5.18625 2.777006e-06 ##                     fdr n_iter     sd_bg ## ZN143      9.423401e-37    100  0.419114 ## ESR1       6.143457e-29    100  2.170021 ## ANDR/FOXA1 3.948060e-24    100 12.677571 ## ZN281      2.777006e-06    100  5.103880"},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"working-with-larger-datasets","dir":"Articles","previous_headings":"","what":"Working With Larger Datasets","title":"Motif Analysis Using motifTestR","text":"Vignettes commonly prepared compiling limited resources example datasets analyses may reveal less information realistically sized data. Motif analysis particularly well-known taking many minutes working large datasets. comprehensive analysis realistically sized data, following code snippets allow analysis dataset, without restricted chromosome 1. obtain full set peaks, simply run following use peaks repeating steps . full set PWMs HOCOMOCOv11 (core-) provided MotifDb can obtained using following. Alternatively, query fields can customised preferred. Similarly, set candidate enhancers found chromosomes can obtained . choosing dataset, note bg_ranges need drawn entire genome, just chromosome 1.","code":"## Not run base_url <- \"https://ftp.ncbi.nlm.nih.gov/geo/samples/GSM3511nnn\" bed_url <- list(   AR = file.path(     base_url, \"GSM3511083/suppl/GSM3511083%5FAR%5Fpeaks%5FED.bed.gz\"   ),   ER = file.path(     base_url, \"GSM3511085/suppl/GSM3511085%5FER%5Fpeaks%5FED.bed.gz\"   ),   H3K27ac = file.path(     base_url, \"GSM3511087/suppl/GSM3511087%5FH3K27ac%5Fpeaks%5FED.bed.gz\"   ) ) all_peaks <- GRangesList(lapply(bed_url, import.bed)) seqlevels(all_peaks) <- seqnames(sq) seqinfo(all_peaks) <- sq ## Return the ranges with coverage from 2 or more targets ar_er_peaks <- makeConsensus(   all_peaks, p = 2/3, method = \"coverage\", min_width = 200 ) |>   ## Now subset to the ranges which overlap a peak from every target   subset(n == 3) |>    resize(width = 400, fix = 'center') ## Not run library(MotifDb) ex_pfm <- MotifDb |>   subset(organism == \"Hsapiens\") |>   query(\"HOCOMOCOv11-core-A\") |>   as.list()  names(ex_pfm) <- gsub(\".+HOCOMOCOv11-core-A-(.+)_.+\", \"\\\\1\", names(ex_pfm)) ## Not run zr75_url <- \"http://www.enhanceratlas.org/data/download/enhancer/hs/ZR75-1.bed\" zr75_enh <- import.bed(zr75_url) zr75_enh <- granges(zr75_enh) seqlevels(zr75_enh) <- seqnames(sq) seqinfo(zr75_enh) <- sq mean(overlapsAny(ar_er_peaks, zr75_enh))"},{"path":[]},{"path":"https://smped.github.io/motifTestR/articles/motifAnalysis.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Motif Analysis Using motifTestR","text":"","code":"## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] parallel  stats4    stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] universalmotif_1.23.8             patchwork_1.3.0                   ##  [3] BSgenome.Hsapiens.UCSC.hg19_1.4.3 BSgenome_1.73.1                   ##  [5] BiocIO_1.15.2                     rtracklayer_1.65.0                ##  [7] extraChIPs_1.9.6                  tibble_3.2.1                      ##  [9] SummarizedExperiment_1.35.4       Biobase_2.65.1                    ## [11] MatrixGenerics_1.17.0             matrixStats_1.4.1                 ## [13] ggside_0.3.1                      BiocParallel_1.39.0               ## [15] motifTestR_1.1.6                  ggplot2_3.5.1                     ## [17] GenomicRanges_1.57.2              Biostrings_2.73.2                 ## [19] GenomeInfoDb_1.41.2               XVector_0.45.0                    ## [21] IRanges_2.39.2                    S4Vectors_0.43.2                  ## [23] BiocGenerics_0.51.3               BiocStyle_2.33.1                  ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.4.1              bitops_1.0-9               ##   [3] filelock_1.0.3             polyclip_1.10-7            ##   [5] XML_3.99-0.17              rpart_4.1.23               ##   [7] lifecycle_1.0.4            httr2_1.0.5                ##   [9] edgeR_4.3.19               lattice_0.22-6             ##  [11] ensembldb_2.29.1           MASS_7.3-61                ##  [13] backports_1.5.0            magrittr_2.0.3             ##  [15] limma_3.61.12              Hmisc_5.1-3                ##  [17] sass_0.4.9                 rmarkdown_2.28             ##  [19] jquerylib_0.1.4            yaml_2.3.10                ##  [21] metapod_1.13.0             Gviz_1.49.0                ##  [23] DBI_1.2.3                  RColorBrewer_1.1-3         ##  [25] harmonicmeanp_3.0.1        abind_1.4-8                ##  [27] zlibbioc_1.51.1            purrr_1.0.2                ##  [29] AnnotationFilter_1.29.0    biovizBase_1.53.0          ##  [31] RCurl_1.98-1.16            nnet_7.3-19                ##  [33] tweenr_2.0.3               VariantAnnotation_1.51.1   ##  [35] rappdirs_0.3.3             GenomeInfoDbData_1.2.13    ##  [37] ggrepel_0.9.6              pkgdown_2.1.1.9000         ##  [39] codetools_0.2-20           DelayedArray_0.31.14       ##  [41] ggforce_0.4.2              xml2_1.3.6                 ##  [43] tidyselect_1.2.1           futile.logger_1.4.3        ##  [45] UCSC.utils_1.1.0           farver_2.1.2               ##  [47] ComplexUpset_1.3.3         BiocFileCache_2.13.2       ##  [49] base64enc_0.1-3            GenomicAlignments_1.41.0   ##  [51] jsonlite_1.8.9             Formula_1.2-5              ##  [53] systemfonts_1.1.0          tools_4.4.1                ##  [55] progress_1.2.3             ragg_1.3.3                 ##  [57] Rcpp_1.0.13                glue_1.8.0                 ##  [59] gridExtra_2.3              SparseArray_1.5.45         ##  [61] mgcv_1.9-1                 xfun_0.48                  ##  [63] dplyr_1.1.4                withr_3.0.1                ##  [65] formatR_1.14               BiocManager_1.30.25        ##  [67] fastmap_1.2.0              latticeExtra_0.6-30        ##  [69] fansi_1.0.6                digest_0.6.37              ##  [71] R6_2.5.1                   textshaping_0.4.0          ##  [73] colorspace_2.1-1           jpeg_0.1-10                ##  [75] dichromat_2.0-0.1          biomaRt_2.61.3             ##  [77] RSQLite_2.3.7              utf8_1.2.4                 ##  [79] tidyr_1.3.1                generics_0.1.3             ##  [81] data.table_1.16.2          prettyunits_1.2.0          ##  [83] InteractionSet_1.33.0      httr_1.4.7                 ##  [85] htmlwidgets_1.6.4          S4Arrays_1.5.11            ##  [87] pkgconfig_2.0.3            gtable_0.3.5               ##  [89] blob_1.2.4                 htmltools_0.5.8.1          ##  [91] bookdown_0.41              ProtGenerics_1.37.1        ##  [93] scales_1.3.0               png_0.1-8                  ##  [95] knitr_1.48                 lambda.r_1.2.4             ##  [97] rstudioapi_0.16.0          rjson_0.2.23               ##  [99] nlme_3.1-166               checkmate_2.3.2            ## [101] curl_5.2.3                 cachem_1.1.0               ## [103] stringr_1.5.1              foreign_0.8-87             ## [105] AnnotationDbi_1.67.0       restfulr_0.0.15            ## [107] desc_1.4.3                 pillar_1.9.0               ## [109] grid_4.4.1                 vctrs_0.6.5                ## [111] dbplyr_2.5.0               cluster_2.1.6              ## [113] htmlTable_2.4.3            evaluate_1.0.1             ## [115] VennDiagram_1.7.3          GenomicFeatures_1.57.1     ## [117] cli_3.6.3                  locfit_1.5-9.10            ## [119] compiler_4.4.1             futile.options_1.0.1       ## [121] Rsamtools_2.21.2           rlang_1.1.4                ## [123] crayon_1.5.3               FMStable_0.1-4             ## [125] labeling_0.4.3             interp_1.1-6               ## [127] forcats_1.0.0              fs_1.6.4                   ## [129] stringi_1.8.4              viridisLite_0.4.2          ## [131] deldir_2.0-4               munsell_0.5.1              ## [133] lazyeval_0.2.2             csaw_1.39.0                ## [135] Matrix_1.7-0               hms_1.1.3                  ## [137] bit64_4.5.2                KEGGREST_1.45.1            ## [139] statmod_1.5.0              highr_0.11                 ## [141] igraph_2.0.3               broom_1.0.7                ## [143] memoise_2.0.1              bslib_0.8.0                ## [145] bit_4.5.0                  GenomicInteractions_1.39.0"},{"path":"https://smped.github.io/motifTestR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stevie Pederson. Author, maintainer.","code":""},{"path":"https://smped.github.io/motifTestR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pederson S (2024). motifTestR: Perform key tests binding motifs sequence data. R package version 1.1.6, https://github.com/smped/motifTestR.","code":"@Manual{,   title = {motifTestR: Perform key tests for binding motifs in sequence data},   author = {Stevie Pederson},   year = {2024},   note = {R package version 1.1.6},   url = {https://github.com/smped/motifTestR}, }"},{"path":"https://smped.github.io/motifTestR/index.html","id":"motiftestr-","dir":"","previous_headings":"","what":"Perform key tests for binding motifs in sequence data","title":"Perform key tests for binding motifs in sequence data","text":"package motifTestR provides small set functions analysing transcription factor binding motifs (TFBMs). Testing positional bias enabled using novel approach, testing enrichment relative set background sequences enabled using multiple statistical models. Testing positional bias intended R native alternative CentriMo MEME-suite, detect deviation note even distribution across width sequences tested, just centrality motifs. Given conventional statistical approach taken, results easily interpretable directly adjusted p-values. Enrichment testing follows well-worn modelling iterative strategies, whilst offering novel approach selection control, background, sequences. Testing similar motifs grouped together set clusters also enabled. install stable version motifTestR Bioconductor please try following. Alternatively, latest build can installed using","code":"if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"motifTestR\") if (!require(\"BiocManager\")) {   install.packages(\"BiocManager\") } BiocManager::install(\"smped/motifTestR\")"},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":null,"dir":"Reference","previous_headings":"","what":"A set of peaks with AR and ER detected — ar_er_peaks","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"set ChIP-Seq peaks AR ER detected","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"","code":"data(\"ar_er_peaks\")"},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"object class GRanges length 849.","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE123767","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"subset peaks found chr1 contained signal least two AR, ER H3K27ac, taken GSE123767. Peaks resized uniform width 400bp downloading Generation ranges documented system.file(\"scripts/ar_er_peaks.R\", package = \"motifTestR\")","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_peaks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A set of peaks with AR and ER detected — ar_er_peaks","text":"","code":"data(\"ar_er_peaks\") ar_er_peaks #> GRanges object with 849 ranges and 0 metadata columns: #>         seqnames              ranges strand #>            <Rle>           <IRanges>  <Rle> #>     [1]     chr1     1008982-1009381      * #>     [2]     chr1     1014775-1015174      * #>     [3]     chr1     1051296-1051695      * #>     [4]     chr1     1299561-1299960      * #>     [5]     chr1     2179886-2180285      * #>     ...      ...                 ...    ... #>   [845]     chr1 246771887-246772286      * #>   [846]     chr1 246868678-246869077      * #>   [847]     chr1 246873126-246873525      * #>   [848]     chr1 247095351-247095750      * #>   [849]     chr1 247267507-247267906      * #>   ------- #>   seqinfo: 24 sequences from hg19 genome"},{"path":"https://smped.github.io/motifTestR/reference/ar_er_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequences from peaks with AR and ER detected — ar_er_seq","title":"Sequences from peaks with AR and ER detected — ar_er_seq","text":"genomic sequences obtained ar_er_peaks","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequences from peaks with AR and ER detected — ar_er_seq","text":"","code":"data(\"ar_er_seq\")"},{"path":"https://smped.github.io/motifTestR/reference/ar_er_seq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sequences from peaks with AR and ER detected — ar_er_seq","text":"object class DNAStringSet length 849.","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequences from peaks with AR and ER detected — ar_er_seq","text":"sequences represent sequences obtained BSgenome.Hsapiens.UCSC.hg19 thw peaks supplied ar_er_peaks Generation sequences documented system.file(\"scripts/ar_er_peaks.R\", package = \"motifTestR\")","code":""},{"path":"https://smped.github.io/motifTestR/reference/ar_er_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequences from peaks with AR and ER detected — ar_er_seq","text":"","code":"data(\"ar_er_seq\") ar_er_seq #> DNAStringSet object of length 849: #>       width seq #>   [1]   400 CTCCACCTCCCGCCCCTCCCCTGCACCCAGGAT...TGAGCCTGTGCAGGTAAGGGGTGAACACGGGC #>   [2]   400 CCGTGGGGGGAGGCTGAGGCTATGGGGACTCTG...AGATTCCAGGGCAGGGGGTGGGCCCGCCTGGT #>   [3]   400 GACGCGCAGGGAACGTCCCTCGGGCCGGGCCAG...GGAAATGTAGTCCTAGAAGAACCAGCGCATGT #>   [4]   400 GAGCCACCACGCCCGGCGAATTTTTGTATTTTT...CACCAAGGGAGGTCGGCTGTTACATGTAACAT #>   [5]   400 GTGGAGGGTCCTCACTTTTTGTTTTGCAAATAA...CAGCGTGGCTTAGGGTTTAGGAGCATGGCTGG #>   ...   ... ... #> [845]   400 CTCTAGACAGTGGTGGAGCTTGCGGGAGTCACA...AAGACGGGTTGAGCGAGTCAGGTTGCTTACTT #> [846]   400 TTCCCTTTCTCTGTTTTTTTCTATAGTGAGGCC...TATGTTTGCAATGGCCATAGAAGTAGTTCAGG #> [847]   400 ATTCAGGTAATCAAAAGTTGCAAAAAAAAAAAA...AGGAGAGTCAGGGAAATGAAAAATTACAAAAA #> [848]   400 TGGTTCCGCGCTCTAGCGCCGGCTCCGCGGGAA...AGCTTGCATTCTGTATTTTCTGTTCTGTGCTC #> [849]   400 GGCTTCCCGGGTGTCCTGGCGTCAGCTAGGGAT...CTGGGATCCGACCATGCAAGAAGGACATTCAC"},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign each motif to a cluster — clusterMotifs","title":"Assign each motif to a cluster — clusterMotifs","text":"Cluster related motifs testing group","code":""},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign each motif to a cluster — clusterMotifs","text":"","code":"clusterMotifs(   motifs,   type = c(\"PPM\", \"ICM\"),   method = c(\"PCC\", \"EUCL\", \"SW\", \"KL\", \"ALLR\", \"BHAT\", \"HELL\", \"SEUCL\", \"MAN\",     \"ALLR_LL\", \"WEUCL\", \"WPCC\"),   power = 1,   agglom = \"complete\",   thresh = 0.2,   plot = FALSE,   labels = FALSE,   cex = 1,   linecol = \"red\",   ... )"},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign each motif to a cluster — clusterMotifs","text":"motifs list universalmotifs list PWMs type Can ICM PPM method method used determining similarity/distances power Raise correlation matrices power converting distance matrix. applied method either \"PCC\" \"WPCC\" agglom Method used agglomeration hclust thresh Tree heights motifs formed cluster plot Show tree produced hclust. requested value set thresh shown horizontal line labels, cex Passed plot.hclust linecol Passed abline argument col ... passed compare_motifs","code":""},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign each motif to a cluster — clusterMotifs","text":"Named vector numeric values representing cluster motif assigned .","code":""},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign each motif to a cluster — clusterMotifs","text":"builds compare_motifs, enabling assignment PWM cluster, subsequent testing motifs cluster, rather returning individual results. Internally matrices converted distance matrices hclust used form clusters. default, options \"EUCL\", \"MAN\" produce distances, whilst similarity matrices produced choosing \"PCC\" correlation based metrics. cases, distance matrix obtained taking 1 - similarity. default PWM labels hidden (labels = FALSE), however can shown using labels = NULL explained plot.hclust. Raising threshold lead fewer, larger clusters whilst leaving value low return conservative approach, smaller clusters. final decision best clustering strategy highly subjective left user. Manual inspection motifs within cluster can performed using view_motifs, shown vignette.","code":""},{"path":"https://smped.github.io/motifTestR/reference/clusterMotifs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign each motif to a cluster — clusterMotifs","text":"","code":"# Load the example motifs data(\"ex_pfm\")  # Return a vector with each motif assigned a cluster # The default uses Pearson's Correlation Coefficient clusterMotifs(ex_pfm) #>  ESR1  ANDR FOXA1 ZN143 ZN281  #>     1     2     2     3     4   # Preview the settings noting that showing labels can clutter the plot # with large numbers of motifs. The defaults for Euclidean distance # show the threshold may need raising clusterMotifs(ex_pfm, plot = TRUE, labels = NULL, method = \"EUCL\")  #>  ESR1  ANDR FOXA1 ZN143 ZN281  #>     1     2     3     4     5"},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the matches to a PWM within an XStringSet — countPwmMatches","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"Count matches PWM within XStringSet","code":""},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"","code":"countPwmMatches(   pwm,   stringset,   rc = TRUE,   min_score = \"80%\",   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"pwm Position Weight Matrix stringset XStringSet rc logical(1) Also find matches using reverse complement pwm min_score minimum score return match mc.cores Passed mclapply analysing list PWMs ... Passed countPWM","code":""},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"integer vector","code":""},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"simply count matches within XStringSet return integer. matches included.","code":""},{"path":"https://smped.github.io/motifTestR/reference/countPwmMatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the matches to a PWM within an XStringSet — countPwmMatches","text":"","code":"## Load the example PWM data(\"ex_pfm\") esr1 <- ex_pfm$ESR1  ## Load the example Peaks data(\"ar_er_seq\") countPwmMatches(esr1, ar_er_seq) #> [1] 22  ## Count all PWMs countPwmMatches(ex_pfm, ar_er_seq) #>  ESR1  ANDR FOXA1 ZN143 ZN281  #>    22     8   113    21    14"},{"path":"https://smped.github.io/motifTestR/reference/ex_pfm.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Position Frequency Matrices — ex_pfm","title":"Example Position Frequency Matrices — ex_pfm","text":"Example Position Frequency Matrices","code":""},{"path":"https://smped.github.io/motifTestR/reference/ex_pfm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Position Frequency Matrices — ex_pfm","text":"","code":"data(\"ex_pfm\")"},{"path":"https://smped.github.io/motifTestR/reference/ex_pfm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Position Frequency Matrices — ex_pfm","text":"object class list length 5.","code":""},{"path":"https://smped.github.io/motifTestR/reference/ex_pfm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Position Frequency Matrices — ex_pfm","text":"object contains 5 PFMs taken HOCOMOCOv11-coreA examples testing Generation motif list documented system.file(\"scripts/ex_pfm.R\", package = \"motifTestR\")","code":""},{"path":"https://smped.github.io/motifTestR/reference/ex_pfm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Position Frequency Matrices — ex_pfm","text":"","code":"data(\"ex_pfm\") ex_pfm$ESR1 #>       1     2     3     4     5     6     7     8     9    10    11    12    13 #> A 0.638 0.074 0.046 0.094 0.002 0.856 0.108 0.396 0.182 0.104 0.054 0.618 0.040 #> C 0.048 0.006 0.018 0.072 0.888 0.006 0.442 0.604 0.376 0.078 0.034 0.198 0.884 #> G 0.260 0.808 0.908 0.178 0.048 0.112 0.312 0.000 0.286 0.044 0.908 0.070 0.014 #> T 0.054 0.112 0.028 0.656 0.062 0.026 0.138 0.000 0.156 0.774 0.004 0.114 0.062 #>      14    15 #> A 0.090 0.058 #> C 0.822 0.330 #> G 0.008 0.066 #> T 0.080 0.546"},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"Find matches PWM cluster within set sequences","code":""},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"","code":"getClusterMatches(   cl,   stringset,   rc = TRUE,   min_score = \"80%\",   best_only = FALSE,   break_ties = c(\"all\", \"random\", \"first\", \"last\", \"central\"),   mc.cores = 1,   ... )  countClusterMatches(   cl,   stringset,   rc = TRUE,   min_score = \"80%\",   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"cl list Position Weight Matrices, universalmotifs, element representing clusters related matrices stringset XStringSet rc logical(1) Also find matches using reverse complement PWMs cluster min_score minimum score return match best_only logical(1) return best match break_ties Method breaking ties returning best match Ignored matches returned (default) mc.cores Passed mclapply ... Passed matchPWM","code":""},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"Output getClusterMatches list DataFrames columns: seq, score, direction, start, end, from_centre, seq_width, motif match first three columns describe sequence matches, score match whether match found using forward reverse PWM. columns start, end width describe match found sequence, whilst from_centre defines distance centre match centre sequence queried. motif column denotes individual motif found match position, noting matches overlap, one highest relative score returned. final column contains matching fragment sequence XStringSet. Output countClusterMatches simple integer vector length number clusters","code":""},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"function extends getPwmMatches returning single set results set clustered motifs. can help remove redundancy results returned highly similar PWMs, GATA3 family. Taking set sequences XStringSet, find matches supplied score (.e. threshold) list Position Weight Matrices (PWMs), clustered together highly-related motifs. default, matches performed using PWMs provided reverse complement, however can easily disabled setting rc = FALSE. function relies heavily matchPWM Views speed. overlapping matches found PWMs within cluster, single match returned. motif highest relative score (score / maxScore(PWM)) selected. choosing return best match (best_only = TRUE), match highest relative score returned sequence. tied scores, best match can chosen either first, last, central, tied matches, choosing one random (default).","code":""},{"path":"https://smped.github.io/motifTestR/reference/getClusterMatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find matches from a PWM cluster within an XStringSet — getClusterMatches","text":"","code":"# Load example PFMs data(\"ex_pfm\") # Cluster using default settings cl_ids <- clusterMotifs(ex_pfm) ex_cl <- split(ex_pfm, cl_ids) # Add optional names names(ex_cl) <- vapply(ex_cl, \\(x) paste(names(x), collapse = \"/\"), character(1))  # Load example sequences data(\"ar_er_seq\") # Get all matches for each cluster getClusterMatches(ex_cl, ar_er_seq) #> $ESR1 #> DataFrame with 22 rows and 9 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          29   18.0880         F       193       207           0       400 #> 2          34   20.8412         R       321       335         128       400 #> 3          60   17.8088         R       154       168         -39       400 #> 4          62   17.5548         R       206       220          13       400 #> 5          98   20.2850         F        13        27        -180       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 18        478   18.9927         R       134       148         -59       400 #> 19        517   19.0738         F       223       237          30       400 #> 20        552   18.4739         F       232       246          39       400 #> 21        575   17.7611         R         4        18        -189       400 #> 22        646   17.5586         R       209       223          16       400 #>           motif           match #>     <character>  <DNAStringSet> #> 1          ESR1 AGGTCACCCTGGCCC #> 2          ESR1 AGGTCACCGTGACCC #> 3          ESR1 AGGTGACCCTGACCT #> 4          ESR1 GGGTCACACTGTCCT #> 5          ESR1 AGGTCACAATGACCT #> ...         ...             ... #> 18         ESR1 AGGTCACCCTGACCG #> 19         ESR1 GGGTCAGCATGACCT #> 20         ESR1 AGGACACACTGACCT #> 21         ESR1 AGGTCACCCTAACCT #> 22         ESR1 AGGTTAGCCTGACCT #>  #> $`ANDR/FOXA1` #> DataFrame with 121 rows and 9 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          12   14.0694         F       199       210         4.5       400 #> 2          16   14.4605         F       177       188       -17.5       400 #> 3          17   15.1441         F       341       352       146.5       400 #> 4          18   14.4417         F       301       312       106.5       400 #> 5          21   14.6369         R       206       217        11.5       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 117       817   14.9185         R       291       302        96.5       400 #> 118       826   14.5836         F       261       272        66.5       400 #> 119       833   23.0102         R       167       184       -24.5       400 #> 120       844   14.3461         F        40        51      -154.5       400 #> 121       844   14.0222         F        72        83      -122.5       400 #>           motif              match #>     <character>     <DNAStringSet> #> 1         FOXA1       GGCTGGCGGGAT #> 2         FOXA1       ACTTGCCAGTGA #> 3         FOXA1       CCCACCCCTCCA #> 4         FOXA1       GGCCTGTGTACC #> 5         FOXA1       CTGTGTCATCCC #> ...         ...                ... #> 117       FOXA1       CCGCAGAGCACA #> 118       FOXA1       TGAGTGCCCCAG #> 119        ANDR TGGCAAGTCAGGGGTGGG #> 120       FOXA1       CAGGGAGCCACA #> 121       FOXA1       GTGGGCAAGGGT #>  #> $ZN143 #> DataFrame with 21 rows and 9 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          30   26.8427         F       166       187       -23.5       400 #> 2          30   26.8023         F       217       238        27.5       400 #> 3          67   29.0591         F       210       231        20.5       400 #> 4         118   29.0063         R       205       226        15.5       400 #> 5         182   28.0840         F       225       246        35.5       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 17        750   28.4138         R       206       227        16.5       400 #> 18        829   26.6710         R       151       172       -38.5       400 #> 19        836   28.9222         R       166       187       -23.5       400 #> 20        837   30.0534         F       216       237        26.5       400 #> 21        837   28.0840         F       352       373       162.5       400 #>           motif                  match #>     <character>         <DNAStringSet> #> 1         ZN143 AGCCTGCCGGGAGATGTAGTTC #> 2         ZN143 GGCACGCCGGGAAATGTAGTTC #> 3         ZN143 GGCATGCTGGGATTTGTAGTCT #> 4         ZN143 TGCCTCCTGGGAAATGTAGTCC #> 5         ZN143 TGCATGCTGGGAACTGTAGTCT #> ...         ...                    ... #> 17        ZN143 GGCATGCCGGGAGTTGTAGTCC #> 18        ZN143 TGCCCGCTGGGAACTGTAGTCC #> 19        ZN143 TGCATGCTGGGATTTGTAGTCC #> 20        ZN143 TGCATGCTGGGAGTTGTAGTCT #> 21        ZN143 TGCATGCTGGGAACTGTAGTCT #>  #> $ZN281 #> DataFrame with 14 rows and 9 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1         109   19.6553         R       369       383         176       400 #> 2         118   20.1871         F        60        74        -133       400 #> 3         122   19.3263         F        95       109         -98       400 #> 4         171   18.5467         R        84        98        -109       400 #> 5         192   19.1012         F       260       274          67       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 10        456   21.2625         R       343       357         150       400 #> 11        507   18.6243         R       175       189         -18       400 #> 12        668   20.0793         R       168       182         -25       400 #> 13        763   22.6040         R       274       288          81       400 #> 14        764   18.8379         R       310       324         117       400 #>           motif           match #>     <character>  <DNAStringSet> #> 1         ZN281 AGTTGGGGGAGGGGC #> 2         ZN281 GGCGGGGGGAGGGGA #> 3         ZN281 GAATGGGGGAGGGGC #> 4         ZN281 GGATGGGGGAAGGGG #> 5         ZN281 GGGAGGGGGCGGGGG #> ...         ...             ... #> 10        ZN281 CGGTGGGGGAGGGGG #> 11        ZN281 GGGAGGGGGAGGGAG #> 12        ZN281 GGGTGGGGGTGGGGG #> 13        ZN281 GGGTGGGGGAGGGGG #> 14        ZN281 AGTGGGGGGAGGGGA #>  # Or Just count them countClusterMatches(ex_cl, ar_er_seq) #>       ESR1 ANDR/FOXA1      ZN143      ZN281  #>         22        121         21         14  # Compare this to individual counts countPwmMatches(ex_pfm, ar_er_seq) #>  ESR1  ANDR FOXA1 ZN143 ZN281  #>    22     8   113    21    14"},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all PWM matches within an XStringSet — getPwmMatches","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"Find PWM matches within set sequences","code":""},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"","code":"getPwmMatches(   pwm,   stringset,   rc = TRUE,   min_score = \"80%\",   best_only = FALSE,   break_ties = c(\"all\", \"random\", \"first\", \"last\", \"central\"),   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"pwm Position Weight Matrix, list PWMs universalmotif list stringset XStringSet rc logical(1) Also find matches using reverse complement pwm min_score minimum score return match best_only logical(1) return best match break_ties Method breaking ties returning best match Ignored matches returned (default) mc.cores Passed mclapply passing multiple PWMs ... Passed matchPWM","code":""},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"DataFrame columns: seq, score, direction, start, end, from_centre, seq_width, match first three columns describe sequence matches, score match whether match found using forward reverse PWM. columns start, end width describe match found sequence, whilst from_centre defines distance centre match centre sequence queried. final column contains matching fragment sequence XStringSet. passing list PWMs, list DataFrames returned.","code":""},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"Taking set sequences XStringSet, find matches supplied score (.e. threshold) single Position Weight Matrix (PWM), generally representing transcription factor binding motif. default, matches performed using PWM provided reverse complement, however can easily disabled setting rc = FALSE. function relies heavily matchPWM Views speed. choosing return best match (best_only = TRUE), match highest score returned sequence. tied scores, best match can chosen either first, last, central, tied matches, choosing one random (default).","code":""},{"path":"https://smped.github.io/motifTestR/reference/getPwmMatches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all PWM matches within an XStringSet — getPwmMatches","text":"","code":"## Load the example PWM data(\"ex_pfm\") esr1 <- ex_pfm$ESR1  ## Load the example Peaks data(\"ar_er_seq\")  ## Return all matches getPwmMatches(esr1, ar_er_seq) #> DataFrame with 22 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          29   18.0880         F       193       207           0       400 #> 2          34   20.8412         R       321       335         128       400 #> 3          60   17.8088         R       154       168         -39       400 #> 4          62   17.5548         R       206       220          13       400 #> 5          98   20.2850         F        13        27        -180       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 18        478   18.9927         R       134       148         -59       400 #> 19        517   19.0738         F       223       237          30       400 #> 20        552   18.4739         F       232       246          39       400 #> 21        575   17.7611         R         4        18        -189       400 #> 22        646   17.5586         R       209       223          16       400 #>               match #>      <DNAStringSet> #> 1   AGGTCACCCTGGCCC #> 2   AGGTCACCGTGACCC #> 3   AGGTGACCCTGACCT #> 4   GGGTCACACTGTCCT #> 5   AGGTCACAATGACCT #> ...             ... #> 18  AGGTCACCCTGACCG #> 19  GGGTCAGCATGACCT #> 20  AGGACACACTGACCT #> 21  AGGTCACCCTAACCT #> 22  AGGTTAGCCTGACCT  ## Just the best match getPwmMatches(esr1, ar_er_seq, best_only = TRUE) #> DataFrame with 22 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          29   18.0880         F       193       207           0       400 #> 2          34   20.8412         R       321       335         128       400 #> 3          60   17.8088         R       154       168         -39       400 #> 4          62   17.5548         R       206       220          13       400 #> 5          98   20.2850         F        13        27        -180       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 18        478   18.9927         R       134       148         -59       400 #> 19        517   19.0738         F       223       237          30       400 #> 20        552   18.4739         F       232       246          39       400 #> 21        575   17.7611         R         4        18        -189       400 #> 22        646   17.5586         R       209       223          16       400 #>               match #>      <DNAStringSet> #> 1   AGGTCACCCTGGCCC #> 2   AGGTCACCGTGACCC #> 3   AGGTGACCCTGACCT #> 4   GGGTCACACTGTCCT #> 5   AGGTCACAATGACCT #> ...             ... #> 18  AGGTCACCCTGACCG #> 19  GGGTCAGCATGACCT #> 20  AGGACACACTGACCT #> 21  AGGTCACCCTAACCT #> 22  AGGTTAGCCTGACCT  ## Apply multiple PWMs as a list getPwmMatches(ex_pfm, ar_er_seq, best_only = TRUE) #> $ESR1 #> DataFrame with 22 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          29   18.0880         F       193       207           0       400 #> 2          34   20.8412         R       321       335         128       400 #> 3          60   17.8088         R       154       168         -39       400 #> 4          62   17.5548         R       206       220          13       400 #> 5          98   20.2850         F        13        27        -180       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 18        478   18.9927         R       134       148         -59       400 #> 19        517   19.0738         F       223       237          30       400 #> 20        552   18.4739         F       232       246          39       400 #> 21        575   17.7611         R         4        18        -189       400 #> 22        646   17.5586         R       209       223          16       400 #>               match #>      <DNAStringSet> #> 1   AGGTCACCCTGGCCC #> 2   AGGTCACCGTGACCC #> 3   AGGTGACCCTGACCT #> 4   GGGTCACACTGTCCT #> 5   AGGTCACAATGACCT #> ...             ... #> 18  AGGTCACCCTGACCG #> 19  GGGTCAGCATGACCT #> 20  AGGACACACTGACCT #> 21  AGGTCACCCTAACCT #> 22  AGGTTAGCCTGACCT #>  #> $ANDR #> DataFrame with 8 rows and 8 columns #>         seq     score direction     start       end from_centre seq_width #>   <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1        27   18.9055         F        58        75      -133.5       400 #> 2       110   20.5599         F       235       252        43.5       400 #> 3       285   18.9230         F       205       222        13.5       400 #> 4       519   18.9718         R       264       281        72.5       400 #> 5       701   20.3572         F       329       346       137.5       400 #> 6       704   20.5870         F        68        85      -123.5       400 #> 7       708   20.9669         F       278       295        86.5       400 #> 8       833   23.0102         R       167       184       -24.5       400 #>                match #>       <DNAStringSet> #> 1 TGTTCTTTTTTGTTGATT #> 2 TGTCCTTTTCTGTTTATT #> 3 TGTTCCTCTCTGTTTACC #> 4 TGTTCAGCTTTGTTTGCT #> 5 TGTTCTTTTGTATTTGCT #> 6 TGTTCTTCTATGTTTATT #> 7 TGTTCTTTATTATTTGCT #> 8 TGTTCTTTTTTGTTTGTT #>  #> $FOXA1 #> DataFrame with 107 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          12   14.0694         F       199       210         4.5       400 #> 2          16   14.4605         F       177       188       -17.5       400 #> 3          17   15.1441         F       341       352       146.5       400 #> 4          18   14.4417         F       301       312       106.5       400 #> 5          21   14.6369         R       206       217        11.5       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 103       793   14.3562         F       194       205        -0.5       400 #> 104       816   14.1175         R        63        74      -131.5       400 #> 105       817   14.9185         R       291       302        96.5       400 #> 106       826   14.5836         F       261       272        66.5       400 #> 107       844   14.3461         F        40        51      -154.5       400 #>              match #>     <DNAStringSet> #> 1     TGTTTGCTTTTG #> 2     TGTTTACTTTCC #> 3     TGTTTATTTAGG #> 4     TGTTTATTCTGG #> 5     TGTTTACTCAAC #> ...            ... #> 103   TGTTTACTTTAA #> 104   TGTTTATTTTAG #> 105   TGTTTACACAGT #> 106   TATTTACTTTAG #> 107   TGTTTACTTTCT #>  #> $ZN143 #> DataFrame with 15 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1          30   26.8427         F       166       187       -23.5       400 #> 2          67   29.0591         F       210       231        20.5       400 #> 3         118   29.0063         R       205       226        15.5       400 #> 4         182   28.0840         F       225       246        35.5       400 #> 5         330   27.3485         R       196       217         6.5       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 11        569   28.1714         R        10        31      -179.5       400 #> 12        750   28.4852         R       151       172       -38.5       400 #> 13        829   26.6710         R       151       172       -38.5       400 #> 14        836   28.9222         R       166       187       -23.5       400 #> 15        837   30.0534         F       216       237        26.5       400 #>                      match #>             <DNAStringSet> #> 1   AGCCTGCCGGGAGATGTAGTTC #> 2   GGCATGCTGGGATTTGTAGTCT #> 3   TGCCTCCTGGGAAATGTAGTCC #> 4   TGCATGCTGGGAACTGTAGTCT #> 5   AGCCTTGTGGGAGTTGTAGTTT #> ...                    ... #> 11  GGCATTTTGGGAGTTGTAGTTT #> 12  CGCATGCTGGGAATTGTAGTTC #> 13  TGCCCGCTGGGAACTGTAGTCC #> 14  TGCATGCTGGGATTTGTAGTCC #> 15  TGCATGCTGGGAGTTGTAGTCT #>  #> $ZN281 #> DataFrame with 13 rows and 8 columns #>           seq     score direction     start       end from_centre seq_width #>     <integer> <numeric>  <factor> <integer> <integer>   <numeric> <integer> #> 1         109   19.6553         R       369       383         176       400 #> 2         118   20.1871         F        60        74        -133       400 #> 3         122   19.3263         F        95       109         -98       400 #> 4         171   18.5467         R        84        98        -109       400 #> 5         192   19.1012         F       260       274          67       400 #> ...       ...       ...       ...       ...       ...         ...       ... #> 9         456   21.2625         R       343       357         150       400 #> 10        507   18.6243         R       175       189         -18       400 #> 11        668   20.0793         R       168       182         -25       400 #> 12        763   22.6040         R       274       288          81       400 #> 13        764   18.8379         R       310       324         117       400 #>               match #>      <DNAStringSet> #> 1   AGTTGGGGGAGGGGC #> 2   GGCGGGGGGAGGGGA #> 3   GAATGGGGGAGGGGC #> 4   GGATGGGGGAAGGGG #> 5   GGGAGGGGGCGGGGG #> ...             ... #> 9   CGGTGGGGGAGGGGG #> 10  GGGAGGGGGAGGGAG #> 11  GGGTGGGGGTGGGGG #> 12  GGGTGGGGGAGGGGG #> 13  AGTGGGGGGAGGGGA #>"},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Regions from hg19 with high N content — hg19_mask","title":"Regions from hg19 with high N content — hg19_mask","text":"GRanges object regions annotated telomeres centromeres","code":""},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regions from hg19 with high N content — hg19_mask","text":"","code":"data(\"hg19_mask\")"},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regions from hg19 with high N content — hg19_mask","text":"object class GRanges length 345.","code":""},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Regions from hg19 with high N content — hg19_mask","text":"package AnnotationHub https://hgdownload.cse.ucsc.edu/goldenpath/hg19/bigZips/hg19.fa.masked.gz","code":""},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regions from hg19 with high N content — hg19_mask","text":"regions defined centromeres telomeres hg19, taken AnnotationHub objects \"AH107360\" \"AH107361\". combined regions containing Ns UCSC 2bit file, regions Ns BSgenome.Hsapiens.UCSC.hg19 retained. Generation ranges documented system.file(\"scripts/hg19_mask.R\", package = \"motifTestR\")","code":""},{"path":"https://smped.github.io/motifTestR/reference/hg19_mask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regions from hg19 with high N content — hg19_mask","text":"","code":"data(\"hg19_mask\") hg19_mask #> GRanges object with 345 ranges and 0 metadata columns: #>         seqnames            ranges strand #>            <Rle>         <IRanges>  <Rle> #>     [1]     chr1           1-11447      * #>     [2]     chr1     177418-227417      * #>     [3]     chr1     267720-317719      * #>     [4]     chr1     471369-521368      * #>     [5]     chr1   2634221-2684220      * #>     ...      ...               ...    ... #>   [341]     chrY 22369680-22419679      * #>   [342]     chrY 23901429-23951428      * #>   [343]     chrY 28819362-58819361      * #>   [344]     chrY 58917657-58967656      * #>   [345]     chrY 59363566-59373566      * #>   ------- #>   seqinfo: 24 sequences from hg19 genome"},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"Form set ranges y (near) exactly match x use background set requiring matching","code":""},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"","code":"makeRMRanges(x, y, ...)  # S4 method for class 'GRanges,GRanges' makeRMRanges(   x,   y,   exclude = GRanges(),   n_iter = 1,   n_total = NULL,   replace = TRUE,   ...,   force_ol = TRUE )  # S4 method for class 'GRangesList,GRangesList' makeRMRanges(   x,   y,   exclude = GRanges(),   n_iter = 1,   n_total = NULL,   replace = TRUE,   mc.cores = 1,   ...,   force_ol = TRUE,   unlist = TRUE )"},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"x GRanges/GRangesList ranges matched y GRanges/GRangesList ranges select random matching ranges ... used exclude GRanges ranges omit testing n_iter number times repeat random selection process n_total Setting value -ride anything set using n_iter. Can vector length, corresponding length x, x GRangesList replace logical(1) Sample without replacement creating set random ranges. force_ol logical(1) Enforce overlap every site x y mc.cores Passsed mclapply unlist logical(1) Return sorted GRanges object, leave GRangesList","code":""},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"GRanges GRangesList object","code":""},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"function uses width distribution 'test' ranges (.e. x) randomly sample set ranges matching width ranges provided y. width distribution clearly exact set fixed-width ranges passed x, whilst random sampling may yield variability matching ranges variable width. x y GRanges objects, implicitly assumed represent similar ranges, overlapping promoter enhancer. passing two GRangesList objects, objects expected contain ranges annotated belonging key features, list elements y must encompass elements x. example x contains two elements named 'promoter' 'intron', y also contain elements named 'promoter' 'intron' sampled matching ranges element x. elements x y named, assumed matching order. default behaviour assume randomly-generated ranges iteration, , ranges randomly formed multiples number 'test' ranges provided x. column iteration added returned ranges. Placing number n_total argument instead select total number ranges specified . case, iteration column included returned ranges. Sampling assumed replacement suitable bootstrapping related procedures, although can disabled setting replace = FALSE","code":""},{"path":"https://smped.github.io/motifTestR/reference/makeRMRanges-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Form a set of random, matching ranges for bootstrapping or permuting — makeRMRanges","text":"","code":"## Load the example peaks data(\"ar_er_peaks\") sq <- seqinfo(ar_er_peaks) ## Now sample size-matched ranges for two iterations from chr1 makeRMRanges(ar_er_peaks, GRanges(sq)[1], n_iter = 2) #> GRanges object with 1698 ranges and 1 metadata column: #>          seqnames              ranges strand | iteration #>             <Rle>           <IRanges>  <Rle> | <integer> #>      [1]     chr1         91036-91435      * |         2 #>      [2]     chr1       151570-151969      * |         2 #>      [3]     chr1       156793-157192      * |         1 #>      [4]     chr1       335925-336324      * |         2 #>      [5]     chr1       365758-366157      * |         1 #>      ...      ...                 ...    ... .       ... #>   [1694]     chr1 248443254-248443653      * |         2 #>   [1695]     chr1 248493084-248493483      * |         2 #>   [1696]     chr1 248801396-248801795      * |         1 #>   [1697]     chr1 248869157-248869556      * |         2 #>   [1698]     chr1 249196752-249197151      * |         1 #>   ------- #>   seqinfo: 24 sequences from hg19 genome  ## Or simply sample 100 ranges if not planning any iterative analyses makeRMRanges(ar_er_peaks, GRanges(sq)[1], n_total = 100) #> GRanges object with 100 ranges and 0 metadata columns: #>         seqnames              ranges strand #>            <Rle>           <IRanges>  <Rle> #>     [1]     chr1     1594492-1594891      * #>     [2]     chr1     6204139-6204538      * #>     [3]     chr1     8926298-8926697      * #>     [4]     chr1   10338571-10338970      * #>     [5]     chr1   11417646-11418045      * #>     ...      ...                 ...    ... #>    [96]     chr1 237632083-237632482      * #>    [97]     chr1 241318705-241319104      * #>    [98]     chr1 243568836-243569235      * #>    [99]     chr1 245708450-245708849      * #>   [100]     chr1 247427291-247427690      * #>   ------- #>   seqinfo: 24 sequences from hg19 genome"},{"path":"https://smped.github.io/motifTestR/reference/motifTestR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"motifTestR: Perform Key Analyses on Transcription Factor Binding Motifs — motifTestR-package","title":"motifTestR: Perform Key Analyses on Transcription Factor Binding Motifs — motifTestR-package","text":"package motifTestR designed two primary analyses TFBMs, testing positional bias overall enrichment.","code":""},{"path":"https://smped.github.io/motifTestR/reference/motifTestR-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"motifTestR: Perform Key Analyses on Transcription Factor Binding Motifs — motifTestR-package","text":"package motifTestR provides two primary functions testing TFBMs within set sequences testMotifPos() detecting positional bias within set test sequences testMotifEnrich() testing overall enrichment TFBM within set test sequences Motifs also able clustered analysis cluster, grouping results. Clusters external approaches can also incorporated. testClusterPos() detecting positional bias matches motif annotated cluster, within set test sequences testClusterEnrich() testing overall enrichment TFBM annotated cluster, within set test sequences main functions rely lower-level functions : countPwmMatches() simply counts number matches within XStringSet getPwmMatches() returns position matches within XStringSet countClusterMatches() simply counts number matches motifs annotated cluster within XStringSet getClusterMatches() returns position matches motifs annotated cluster within XStringSet makeRMRanges() produces set random, matching ranges based key characteristics set test sequences/ranges simple utility function provided enable visualisation results plotMatchPos() enables visualisation matches within set sequences using multiple strategies","code":""},{"path":[]},{"path":"https://smped.github.io/motifTestR/reference/motifTestR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"motifTestR: Perform Key Analyses on Transcription Factor Binding Motifs — motifTestR-package","text":"Stevie Pederson","code":""},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Motif Match Positions — plotMatchPos","title":"Plot Motif Match Positions — plotMatchPos","text":"Plot distribution motif matches across sequences","code":""},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Motif Match Positions — plotMatchPos","text":"","code":"plotMatchPos(   matches,   binwidth = 10,   abs = FALSE,   use_totals = FALSE,   type = c(\"density\", \"cdf\", \"heatmap\"),   geom = c(\"smooth\", \"line\", \"point\", \"col\"),   cluster = FALSE,   w = 0.1,   heat_fill = NULL,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Motif Match Positions — plotMatchPos","text":"matches Output getPwmMatches binwidth Width bins use plotting abs logical(1) Plot absolute distances centre use_totals logical(1). TRUE, plots use total counts. default (FALSE) plots probabilities. type Plot match density, CDF binned heatmap geom Type geom used line plots. Ignored heatmaps cluster logical(1) Cluster motifs drawing heatmap. TRUE dendrogram added LHS plot w Relative width dendrogram (0, 1) heat_fill scale_fill_continuous object heatmaps. provided, scale_fill_viridis_c() added heatmap. ... Passed individual geom* functions","code":""},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Motif Match Positions — plotMatchPos","text":"ggplot2 object","code":""},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Motif Match Positions — plotMatchPos","text":"Multiple options provided showing distribution PWM matches within set sequences, using either smoothed probability density, probability CDF heatmap. Distances can shown symmetrical around centre using absolute distances central position within sequences. Heatmaps enabled comparisons across multiple PWMs, optional clustering enabled. adding dendrogram clustering, returned plot object patchwork object.","code":""},{"path":"https://smped.github.io/motifTestR/reference/plotMatchPos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Motif Match Positions — plotMatchPos","text":"","code":"## Load the example PWM data(\"ex_pfm\") esr1 <- ex_pfm$ESR1  ## Load the example sequences from the peaks data(\"ar_er_seq\")  ## Just the best match bm <- getPwmMatches(esr1, ar_er_seq, best_only = TRUE) plotMatchPos(bm, se = FALSE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   ## Matches can also be shown by distance from centre plotMatchPos(bm, abs = TRUE) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'   ## Cumulative Probability plots are also implemented plotMatchPos(bm, type = \"cdf\", geom = \"line\", colour = \"red\") +   geom_abline(intercept = 0.5, slope = 1/ 400)"},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"Test enrichment motif within cluster across set sequences using background set derive NULL hypothesis","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"","code":"testClusterEnrich(   cl,   stringset,   bg,   var = \"iteration\",   model = c(\"quasipoisson\", \"hypergeometric\", \"poisson\", \"iteration\"),   sort_by = c(\"p\", \"none\"),   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"cl list Position Weight Matrices, universalmotifs, element representing clusters related matrices stringset XStringSet equal sequence widths bg XStringSet sequence widths test XStringset var column mcols element bg, usually denoting iteration number model model used analysis sort_by Column sort results mc.cores Passed mclapply ... Passed getPwmMatches countPwmMatches","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"See testMotifEnrich","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"extends analytic methods offered testMotifEnrich using PWMs grouped set clusters. cluster-level approaches, hits multiple PWMs overlap counted single hit ensuring duplicated matches double-counted, individual positions within sequences .","code":""},{"path":[]},{"path":"https://smped.github.io/motifTestR/reference/testClusterEnrich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test enrichment across a cluster of motifs using a background set of sequences — testClusterEnrich","text":"","code":"## Load the example peaks & the sequences data(\"ar_er_peaks\") data(\"ar_er_seq\") sq <- seqinfo(ar_er_peaks) ## Now sample size-matched ranges 10 times larger. In real-world analyses, ## this set should be sampled as at least 1000x larger, ensuring features ## are matched to your requirements. This example masks regions with known N ## content, including centromeres & telomeres data(\"hg19_mask\") set.seed(305) bg_ranges <- makeRMRanges(   ar_er_peaks, GRanges(sq)[1], exclude = hg19_mask, n_iter = 10 )  ## Convert ranges to DNAStringSets library(BSgenome.Hsapiens.UCSC.hg19) #> Loading required package: BSgenome #> Loading required package: BiocIO #> Loading required package: rtracklayer #>  #> Attaching package: ‘rtracklayer’ #> The following object is masked from ‘package:BiocIO’: #>  #>     FileForFormat genome <- BSgenome.Hsapiens.UCSC.hg19 bg_seq <- getSeq(genome, bg_ranges)  ## Test for enrichment of clustered motifs data(\"ex_pfm\") cl <- list(A = ex_pfm[1], B = ex_pfm[2:3]) testClusterEnrich(cl, ar_er_seq, bg_seq, model = \"poisson\") #>   sequences matches expected enrichment        Z            p          fdr #> B       849     121     26.7   4.531835 18.24971 1.625599e-40 3.251198e-40 #> A       849      22      0.5  44.000000 30.40559 1.315112e-28 1.315112e-28 #>    est_bg_rate #> B 0.0314487633 #> A 0.0005889282"},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":null,"dir":"Reference","previous_headings":"","what":"Test positional bias motifs within a cluster — testClusterPos","title":"Test positional bias motifs within a cluster — testClusterPos","text":"Test positional bias motifs within given cluster","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test positional bias motifs within a cluster — testClusterPos","text":"","code":"testClusterPos(   x,   stringset,   binwidth = 10,   abs = FALSE,   rc = TRUE,   min_score = \"80%\",   break_ties = \"all\",   alt = c(\"greater\", \"less\", \"two.sided\"),   sort_by = c(\"p\", \"none\"),   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test positional bias motifs within a cluster — testClusterPos","text":"x Position Weight Matrix, universalmotif object list thereof. Alternatively can single DataFrame list DataFrames returned getClusterMatches best_only = TRUE stringset XStringSet. required matches supplied x binwidth Width bins across range group data abs Use absolute positions around zero find symmetrical enrichment rc logical(1) Also find matches using reverse complement PWM min_score minimum score return match break_ties Choose resolve matches tied scores alt Alternative hypothesis binomial test sort_by Column sort results mc.cores Passed mclapply ... Passed matchPWM","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test positional bias motifs within a cluster — testClusterPos","text":"data.frame columns start, end, centre, width, total_matches, matches_in_region, expected, enrichment, prop_total, p consensus_motif total matches represent total number matches within set sequences, whilst number observed final region also given, along proportion total represents. Enrichment simply ratio observed expected based expectation null hypothesis consensus motif across matches returned Position Frequency Matrix (PFM) using consensusMatrix.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test positional bias motifs within a cluster — testClusterPos","text":"reimplementation testMotifPos sets motifs clustered similarity. positions test bias motifs within cluster given overlapping matches counted , match retained one highest relative score. also noted motif clusters contain PWMs varying length. finding positional bias, widest motif taken width , matches narrower motifs outside range allowed wider motifs discarded. reduction signal make small difference outer bins, considered problematic larger analysis.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testClusterPos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test positional bias motifs within a cluster — testClusterPos","text":"","code":"## Load the example PWM data(\"ex_pfm\") ## Load the example sequences data(\"ar_er_seq\")  ## Cluster the motifs cl <- list(A = ex_pfm[1], B = ex_pfm[2:3])  ## Get the best match and use this data matches <- getClusterMatches(cl, ar_er_seq, best_only = TRUE) ## Test for enrichment in any position testClusterPos(matches) #>   start end centre width total_matches matches_in_region expected enrichment #> B   -35  75     20   110           114                45 17.81250   2.526316 #> A  -195 135    -30   330            22                22  9.03876   2.433962 #>   prop_total          p        fdr consensus_motif #> B  0.3947368 0.03553632 0.07107263    22, 30, .... #> A  1.0000000 0.83704449 0.83704449    15, 0, 7....  ## Or just pass the clustered matrices ## Here we've set abs = TRUE to test absolute distance from the centre testClusterPos(cl, ar_er_seq, abs = TRUE, binwidth = 10) #>   start end centre width total_matches matches_in_region expected enrichment #> B    10  20     15    10           114                17 5.937500   2.863158 #> A     0 140     70   140            22                16 7.979275   2.005195 #>   prop_total           p         fdr consensus_motif #> B  0.1491228 0.001779427 0.003558853    22, 30, .... #> A  0.7272727 0.657021567 0.657021567    15, 0, 7...."},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Test motif enrichment using a background set of sequences — testMotifEnrich","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"Test motif enrichment within set sequences using background set derive NULL hypothesis","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"","code":"testMotifEnrich(   pwm,   stringset,   bg,   var = \"iteration\",   model = c(\"quasipoisson\", \"hypergeometric\", \"poisson\", \"iteration\"),   sort_by = c(\"p\", \"none\"),   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"pwm Position Weight Matrix list PWMs stringset XStringSet equal sequence widths bg XStringSet sequence widths test XStringset var column mcols element bg, usually denoting iteration number model model used analysis sort_by Column sort results mc.cores Passed mclapply ... Passed getPwmMatches countPwmMatches","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"data.frame columns: sequences, matches, expected, enrichment, p, additional columns Z, est_bg_rate (Poisson), odds_ratio (Hypergeometric) Z, sd_bg, n_iter iter_p (Iterations). numbers sequences matches refer test set sequences, whilst expected expected number matches Poisson iterative null distribution. ratio matches expected given enrichment, along Z score p-value. Whilst Z score representative Poisson model, used directly estimate p-values iterative approach. latter approach, sd matches found background sequences also given, along number iterations p-values permutations testing one-sided hypothesis hypothesis enrichment. may also worth noting producing background sequences using makeRMRanges replace = TRUE force_ol = TRUE, iterative model corresponds bootstrap, given test sequences overlap background sequences background ranges able sampled replacement.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"function offers four alternative models assessing enrichment motif within set sequences, comparison background set sequences. Selection BG sequences plays important role , conjunction question addressed, determines appropriate model use testing, described . also noted larger BG set sequences, larger computational burden, results can take far longer return. many millions background sequences, may run beyond hour","code":""},{"path":[]},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"hypergeometric-tests","dir":"Reference","previous_headings":"","what":"Hypergeometric Tests","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"Hypergeometric tests best suited use case test set sequences represents subset larger set, specific feature behaviour, whilst BG set may remainder set without feature. example, test set may represent ChIP-Seq binding sites signal changes response treatment, whilst BG set represents sites changed signal observed. Testing one-sided, enrichment motifs within test set. Due relatively smaller sized datasets, setting model = \"hypergeometric\", generally return results quickly","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"poisson-tests","dir":"Reference","previous_headings":"","what":"Poisson Tests","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"approach requires set background sequences much larger test set sequences. parameters Poisson model estimated per-sequence manner set BG sequences, observed rate motif-matches within test set tested using poisson.test. approach assumes matches follow Poisson distribution, often true, data can also -dispersed. Given model can also return results relatively quickly, primarily suitable data exploration, quickly checking expected behaviours, final results.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"quasi-poisson-test","dir":"Reference","previous_headings":"","what":"Quasi-Poisson Test","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"quasipoisson model allows -dispersion return conservative results using standard Poisson model. method currently implemented , BG sequences divided blocks (.e. iterations), identical size test set sequences. Model parameters estimated per iteration across BG set sequences, rate matches test set compared blocks. ensures conservative results analysing test bg sequences collections individual sequences. expected BG set matched features interest chosen using makeRMRanges large number iterations, e.g. n_iter = 1000. Due parameterisation, quasipoisson approaches can computationally time-consuming, effectively iterative approach.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"iteration","dir":"Reference","previous_headings":"","what":"Iteration","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"Setting model \"iteration\" performs non-parametric analysis, exception returning Z-scores Central Limit Theorem. Mean SD matches found iteration, used return Z scores, p-values returned Z-test comparing observed values directly sampled values obtained BG sequences. Sampled values calculated directly , limited precision. QuasiPoisson model, large number iterations expected used, ensure CLT holds, making computationally demanding test. iteration/block expected identically-sized test set, matched features appropriate using makeRMRanges().","code":""},{"path":[]},{"path":"https://smped.github.io/motifTestR/reference/testMotifEnrich.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test motif enrichment using a background set of sequences — testMotifEnrich","text":"","code":"## Load the example peaks & the sequences data(\"ar_er_peaks\") data(\"ar_er_seq\") sq <- seqinfo(ar_er_peaks) ## Now sample size-matched ranges 10 times larger. In real-world analyses, ## this set should be sampled as at least 1000x larger, ensuring features ## are matched to your requirements. This example masks regions with known N ## content, including centromeres & telomeres data(\"hg19_mask\") set.seed(305) bg_ranges <- makeRMRanges(   ar_er_peaks, GRanges(sq)[1], exclude = hg19_mask, n_iter = 10 )  ## Convert ranges to DNAStringSets library(BSgenome.Hsapiens.UCSC.hg19) genome <- BSgenome.Hsapiens.UCSC.hg19 bg_seq <- getSeq(genome, bg_ranges)  ## Test for enrichment of the ESR1 motif data(\"ex_pfm\") esr1 <- ex_pfm$ESR1 testMotifEnrich(esr1, ar_er_seq, bg_seq, model = \"poisson\") #>   sequences matches expected enrichment        Z            p          fdr #> 1       849      22      0.5         44 30.40559 1.315112e-28 1.315112e-28 #>    est_bg_rate #> 1 0.0005889282  ## Test all motifs testMotifEnrich(ex_pfm, ar_er_seq, bg_seq, model = \"poisson\") #>       sequences matches expected enrichment         Z            p          fdr #> ZN143       849      21      0.0        Inf       Inf 0.000000e+00 0.000000e+00 #> FOXA1       849     113     25.5   4.431373 17.327582 4.223239e-37 1.055810e-36 #> ESR1        849      22      0.5  44.000000 30.405592 1.315112e-28 2.191853e-28 #> ANDR        849       8      1.4   5.714286  5.578018 1.065480e-04 1.331850e-04 #> ZN281       849      14      6.4   2.187500  3.004164 7.912704e-03 7.912704e-03 #>        est_bg_rate #> ZN143 0.0000000000 #> FOXA1 0.0300353357 #> ESR1  0.0005889282 #> ANDR  0.0016489988 #> ZN281 0.0075382803"},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for a Uniform Distribution across a set of best matches — testMotifPos","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"Test Uniform Distribution across set best matches","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"","code":"testMotifPos(   x,   stringset,   binwidth = 10,   abs = FALSE,   rc = TRUE,   min_score = \"80%\",   break_ties = \"all\",   alt = c(\"greater\", \"less\", \"two.sided\"),   sort_by = c(\"p\", \"none\"),   mc.cores = 1,   ... )"},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"x Position Weight Matrix, universalmotif object list thereof. Alternatively can single DataFrame list DataFrames returned getPwmMatches best_only = TRUE stringset XStringSet. required matches supplied x binwidth Width bins across range group data abs Use absolute positions around zero find symmetrical enrichment rc logical(1) Also find matches using reverse complement PWM min_score minimum score return match break_ties Choose resolve matches tied scores alt Alternative hypothesis binomial test sort_by Column sort results mc.cores Passed mclapply ... Passed matchPWM","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"data.frame columns start, end, centre, width, total_matches, matches_in_region, expected, enrichment, prop_total, p consensus_motif total matches represent total number matches within set sequences, whilst number observed final region also given, along proportion total represents. Enrichment simply ratio observed expected based expectation null hypothesis consensus motif across matches returned Position Frequency Matrix (PFM) using consensusMatrix.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"function tests even positional spread motif matches across set sequences, using assumption (.e. H~0~) positional bias, matches evenly distributed across positions within set sequences. Conversely, positional bias, typically necessarily near centre range, function intends detect signal, rejection null hypothesis. Input can provided output getPwmMatches setting best_only = TRUE matches already identified. choosing provide object argument matches, nothing required arguments pwm, stringset, rc, min_score break_ties Otherwise, Position Weight Matrix (PWM) XStringSet required, along relevant arguments, best matches identified within function. set best matches grouped bins along range, central bin containing zero, tallied. Setting abs TRUE set positions centre absolute values, returning counts purely bins distances zero, marking inclusive lower bound. Motif alignments assigned bins based central position match, provided column from_centre calling getPwmMatches. binom.test performed bin using alternative hypothesis, returned p-values across bins combined using Harmonic Mean p-value (HMP) (See p.hmp). bins raw p-values HMP identified returned values start, end, centre, width, matches region, expected enrichment across set bins. expectation positional bias evident, narrow range containing non-trivial proportion total matches. also noted binom.test() can return p-values zero, beyond machine precision. instances, zero p-values excluded calculation HMP. give slight conservative bias, assumes extreme cases, neighbouring bins highly likely also return extremely low p-values significance lost.","code":""},{"path":"https://smped.github.io/motifTestR/reference/testMotifPos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test for a Uniform Distribution across a set of best matches — testMotifPos","text":"","code":"## Load the example PWM data(\"ex_pfm\") esr1 <- ex_pfm$ESR1  ## Load the example sequences data(\"ar_er_seq\")  ## Get the best match and use this data matches <- getPwmMatches(esr1, ar_er_seq, best_only = TRUE) ## Test for enrichment in any position testMotifPos(matches) #>   start end centre width total_matches matches_in_region expected enrichment #> 1  -195 135    -30   330            22                22  9.03876   2.433962 #>   prop_total         p       fdr consensus_motif #> 1          1 0.8370445 0.8370445    15, 0, 7....  ## Provide a list of PWMs, testing for distance from zero testMotifPos(ex_pfm, ar_er_seq, abs = TRUE, binwidth = 10) #>       start end centre width total_matches matches_in_region expected #> FOXA1    10  20     15    10           107                16 5.487179 #> ZN143    20  40     30    20            15                 8 1.578947 #> ESR1      0 140     70   140            22                16 7.979275 #> ANDR     10 140     75   130             8                 8 2.916667 #> ZN281    10 180     95   170            13                11 6.062176 #>       enrichment prop_total           p        fdr consensus_motif #> FOXA1   2.915888  0.1495327 0.002314982 0.01157491    0, 0, 0,.... #> ZN143   5.066667  0.5333333 0.086140631 0.21535158    3, 1, 6,.... #> ESR1    2.005195  0.7272727 0.657021567 0.94718429    15, 0, 7.... #> ANDR    2.742857  1.0000000 0.900392478 0.94718429    0, 0, 0,.... #> ZN281   1.814530  0.8461538 0.947184286 0.94718429    2, 1, 9,...."},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":null,"dir":"Reference","previous_headings":"","what":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"chr1 subset candidate enhancers ZR-75-1 cells","code":""},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"","code":"data(\"zr75_enh\")"},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"object class GRanges length 5237.","code":""},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"http://www.enhanceratlas.org/index.php","code":""},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"enhancers chr1 subset enhancer regions ZR-75-1 cells identified EnhancerAtlas 2.0 #' Generation ranges documented system.file(\"scripts/zr75_enh.R\", package = \"motifTestR\")","code":""},{"path":"https://smped.github.io/motifTestR/reference/zr75_enh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candidate Enhancer Regions from ZR-75-1 Cells — zr75_enh","text":"","code":"data(\"zr75_enh\") zr75_enh #> GRanges object with 5237 ranges and 0 metadata columns: #>          seqnames              ranges strand #>             <Rle>           <IRanges>  <Rle> #>      [1]     chr1         28481-29320      * #>      [2]     chr1       234931-236780      * #>      [3]     chr1       440761-443340      * #>      [4]     chr1       459151-460990      * #>      [5]     chr1       462821-464300      * #>      ...      ...                 ...    ... #>   [5233]     chr1 248800421-248800510      * #>   [5234]     chr1 249132751-249134450      * #>   [5235]     chr1 249151701-249152020      * #>   [5236]     chr1 249166051-249169210      * #>   [5237]     chr1 249239441-249240740      * #>   ------- #>   seqinfo: 24 sequences from hg19 genome"},{"path":"https://smped.github.io/motifTestR/news/index.html","id":"motiftestr-018","dir":"Changelog","previous_headings":"","what":"motifTestR 0.1.8","title":"motifTestR 0.1.8","text":"First complete draft","code":""},{"path":"https://smped.github.io/motifTestR/news/index.html","id":"motiftestr-0990","dir":"Changelog","previous_headings":"","what":"motifTestR 0.99.0","title":"motifTestR 0.99.0","text":"Submitted Bioconductor","code":""},{"path":"https://smped.github.io/motifTestR/news/index.html","id":"motiftestr-115","dir":"Changelog","previous_headings":"","what":"motifTestR 1.1.5","title":"motifTestR 1.1.5","text":"Added clusterMotifs, testClusterPos testClusterEnrich Enforced strict use PWMs functions","code":""}]
